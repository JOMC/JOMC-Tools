##
##   Copyright (c) 2009 The JOMC Project
##   Copyright (c) 2005 Christian Schulte <schulte2005@users.sourceforge.net>
##   All rights reserved.
##
##   Redistribution and use in source and binary forms, with or without
##   modification, are permitted provided that the following conditions
##   are met:
##
##     o Redistributions of source code must retain the above copyright
##       notice, this list of conditions and the following disclaimer.
##
##     o Redistributions in binary form must reproduce the above copyright
##       notice, this list of conditions and the following disclaimer in
##       the documentation and/or other materials provided with the
##       distribution.
##
##   THIS SOFTWARE IS PROVIDED BY THE JOMC PROJECT AND CONTRIBUTORS "AS IS"
##   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
##   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
##   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE JOMC PROJECT OR
##   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
##   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
##   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
##   OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
##   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
##   OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
##   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##
##   $Id$
##
package ${tool.getJavaPackageName($implementation)};

import java.util.Locale;
import java.util.ResourceBundle;
import java.text.MessageFormat;

#if($comment)
/** Accessor methods for the {@code "$tool.getJavaClasspathLocation($implementation)${classSuffix}"} {@code ResourceBundle}. */
#end
@javax.annotation.Generated
(
  value = "$tool.getClass().getName()",
  comments = "See ${pom.url}",
  date = "$now"
)
class ${tool.getJavaTypeName($implementation,false)}${classSuffix}
{

#if($comment)
  /** Singleton instance. */
#end
  private static final ${tool.getJavaTypeName($implementation,false)}${classSuffix} instance = new ${tool.getJavaTypeName($implementation,false)}${classSuffix}();

#if($comment)
  /** Creates a new <code>${tool.getJavaTypeName($implementation,false)}${classSuffix}</code> instance. */
#end
  ${tool.getJavaTypeName($implementation,false)}${classSuffix}()
  {
#if($implementation.getMessages())
#foreach($message in $implementation.getMessages().getMessage())
    this.getMessage ( "$message.getName()", Locale.getDefault() );
#end
#foreach($messageReference in $implementation.getMessages().getReference())
    this.getMessage ( "$messageReference.getName()", Locale.getDefault() );
#end
#end
  }

#if($comment)
  /**
   * Gets the <code>${tool.getJavaTypeName($implementation,false)}${classSuffix}</code> singleton.
   *
   * @return The <code>${tool.getJavaTypeName($implementation,false)}${classSuffix}</code> singleton.
   */
#end
  static ${tool.getJavaTypeName($implementation,false)}${classSuffix} getInstance()
  {
    return instance;
  }

#if($implementation.getMessages())
#foreach($message in $implementation.getMessages().getMessage())
#parse($tool.getTemplateLocation("Bundle.java-getter.vm"))
#end
#foreach($messageReference in $implementation.getMessages().getReference())
#set($message = $module.getMessages().getMessage($messageReference.getName()))
#parse($tool.getTemplateLocation("Bundle.java-getter.vm"))
#end
#end

#if($comment)
  /**
   * Gets a message for a given key and locale.
   *
   * @param key The key of the message to return.
   * @param locale The locale of the message.
   *
   * @return Message for {@code key} using {@code locale}.
   */
#end
  private String getMessage( final String key, Locale locale )
  {
    if ( locale == null )
    {
      locale = Locale.getDefault();
    }

    return ResourceBundle.getBundle(
        "$tool.getJavaClasspathLocation($implementation)${classSuffix}", locale ).
        getString( key );

  }
}
