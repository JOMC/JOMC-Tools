##
##   Copyright (C) Christian Schulte, 2005-206
##   All rights reserved.
##
##   Redistribution and use in source and binary forms, with or without
##   modification, are permitted provided that the following conditions
##   are met:
##
##     o Redistributions of source code must retain the above copyright
##       notice, this list of conditions and the following disclaimer.
##
##     o Redistributions in binary form must reproduce the above copyright
##       notice, this list of conditions and the following disclaimer in
##       the documentation and/or other materials provided with the
##       distribution.
##
##   THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
##   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
##   AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
##   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY DIRECT, INDIRECT,
##   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
##   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
##   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
##   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
##   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
##   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##
##   $JOMC$
##
## @param model The model declaring the modules of the implementation to render.
## @param modules The modules declaring the implementation to render.
## @param specification The specification to render.
## @param tool The tool merging the template.
## @param toolName The name of the tool merging the template.
## @param toolVersion The version of the tool merging the template.
## @param toolUrl The URL to the site of the tool merging the template.
## @param calendar A java.util.Calendar instance.
## @param now The current timestamp formatted using the pattern "yyyy-MM-dd'T'HH:mm:ss.SSSZ".
## @param year The current year formatted using the pattern "yyyy".
## @param month The current month formatted using the pattern "MM".
## @param day The current day formatted using the pattern "dd".
## @param hour The current hour formatted using the pattern "HH".
## @param minute The current minute formatted using the pattern "mm".
## @param second The current second formatted using the pattern "ss".
## @param timezone The current timezone formatted using the pattern "Z".
## @param shortDate The current date formatted using a 'SHORT' format style.
## @param mediumDate The current date formatted using a 'MEDIUM' format style.
## @param longDate The current date formatted using a 'LONG' format style.
## @param isoDate The current date formatted using an ISO-8601 format style.
## @param shortTime The current time formatted using a 'SHORT' format style.
## @param mediumTime The current time formatted using a 'MEDIUM' format style.
## @param longTime The current time formatted using a 'LONG' format style.
## @param isoTime The current time formatted using an ISO-8601 format style.
## @param shortDateTime The current date and time formatted using a 'SHORT' format style.
## @param mediumDateTime The current date and time formatted using a 'MEDIUM' format style.
## @param longDateTime The current date and time formatted using a 'LONG' format style.
## @param isoDateTime The current date and time formatted using an ISO-8601 format style.
#if($with-editor-fold)
${tool.getIndentation(0)}// <editor-fold defaultstate="collapsed" desc=" Generated Documentation ">
#end
#if($with-javadoc)
${tool.getIndentation(0)}/**
#if($specification.getDocumentation())
${tool.getIndentation(0)} * $tool.getJavadocComment($specification.getDocumentation(), 0, " * ")
#end
${tool.getIndentation(0)} *
${tool.getIndentation(0)} * <p>
${tool.getIndentation(0)} *   This specification is identified by identifier {@code <$specification.getIdentifier()>}.
#if($specification.getMultiplicity().value() == "One")
${tool.getIndentation(0)} *   An application assembler may provide either no or one implementation of this specification due to
${tool.getIndentation(0)} *   multiplicity {@code <$specification.getMultiplicity().value()>}.
#elseif($specification.getMultiplicity().value() == "Many")
${tool.getIndentation(0)} *   An application assembler may provide multiple implementations of this specification (including none) due to
${tool.getIndentation(0)} *   multiplicity {@code <$specification.getMultiplicity().value()>}.
#end
#if($specification.getScope())
${tool.getIndentation(0)} *   This specification applies to {@code <$specification.getScope()>} scope.
${tool.getIndentation(0)} *   The same $tool.getHtmlString($specification.getScope().toLowerCase($tool.getLocale())) object is returned whenever requested.
#else
${tool.getIndentation(0)} *   This specification does not apply to any scope. A new object is returned whenever requested.
#end
${tool.getIndentation(0)} * </p>
${tool.getIndentation(0)} *
${tool.getIndentation(0)} * <p>
${tool.getIndentation(0)} *   Use of class {@code ObjectManager} is supported for accessing implementations.
${tool.getIndentation(0)} *   <blockquote><pre>
#if($specification.getMultiplicity().value() == "One")
${tool.getIndentation(0)} * $tool.getJavaTypeName($specification,false) object = ObjectManagerFactory.getObjectManager( getClass().getClassLoader() ).getObject( ${tool.getHtmlString($tool.getJavaTypeName($specification,false))}.class );
#elseif($specification.getMultiplicity().value() == "Many")
${tool.getIndentation(0)} * ${tool.getJavaTypeName($specification,false)}[] objects = ObjectManagerFactory.getObjectManager( getClass().getClassLoader() ).getObject( ${tool.getHtmlString($tool.getJavaTypeName($specification,false))}[].class );
#end
${tool.getIndentation(0)} * $tool.getJavaTypeName($specification,false) object = ObjectManagerFactory.getObjectManager( getClass().getClassLoader() ).getObject( ${tool.getHtmlString($tool.getJavaTypeName($specification,false))}.class, "<i>implementation name</i>" );
${tool.getIndentation(0)} *   </pre></blockquote>
${tool.getIndentation(0)} * </p>
${tool.getIndentation(0)} *
#if($with-javadoc-author && $specification.getAuthors())
#foreach($author in $specification.getAuthors().getAuthor())
${tool.getIndentation(0)} * @author #if($author.getMail())<a href="mailto:$author.getMail()">#end$tool.getHtmlString($author.getName())#if($author.getMail())</a>#end#if($author.getVersion()) $tool.getHtmlString($author.getVersion())#end

#end
#end
#if($with-javadoc-version && $specification.getVersion())
${tool.getIndentation(0)} * @version $tool.getHtmlString($specification.getVersion())
#else
${tool.getIndentation(0)} * @version This specification does not support versioning.
#end
${tool.getIndentation(0)} * @see org.jomc.ObjectManagerFactory
${tool.getIndentation(0)} * @see org.jomc.ObjectManager
${tool.getIndentation(0)} */
#end
#if($with-editor-fold)
${tool.getIndentation(0)}// </editor-fold>
#end
