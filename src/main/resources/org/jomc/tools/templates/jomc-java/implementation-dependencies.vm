##
##   Copyright (c) 2009 The JOMC Project
##   Copyright (c) 2005 Christian Schulte <schulte2005@users.sourceforge.net>
##   All rights reserved.
##
##   Redistribution and use in source and binary forms, with or without
##   modification, are permitted provided that the following conditions
##   are met:
##
##     o Redistributions of source code must retain the above copyright
##       notice, this list of conditions and the following disclaimer.
##
##     o Redistributions in binary form must reproduce the above copyright
##       notice, this list of conditions and the following disclaimer in
##       the documentation and/or other materials provided with the
##       distribution.
##
##   THIS SOFTWARE IS PROVIDED BY THE JOMC PROJECT AND CONTRIBUTORS "AS IS"
##   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
##   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
##   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE JOMC PROJECT OR
##   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
##   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
##   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
##   OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
##   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
##   OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
##   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##
##   $Id$
##
## @param tool The tool merging the template.
## @param toolName The name of the tool merging the template.
## @param toolVersion The version of the tool merging the template.
## @param toolUrl The URL to the site of the tool merging the template.
## @param calendar A java.util.Calendar instance.
## @param now The current timestamp formatted using the pattern "yyyy-MM-dd'T'HH:mm:ss.SSSZ".
## @param year The current year formatted using the pattern "yyyy".
## @param month The current month formatted using the pattern "MM".
## @param day The current day formatted using the pattern "dd".
## @param hour The current hour formatted using the pattern "HH".
## @param minute The current minute formatted using the pattern "mm".
## @param second The current second formatted using the pattern "ss".
## @param timezone The current timezone formatted using the pattern "Z".
## @param model The model declaring the modules of the implementation to render.
## @param modules The modules declaring the implementation to render.
## @param implementation The implementation to render.
#set($dependencies = $modules.getDependencies($implementation.getIdentifier()))
#if($dependencies)
${tool.getIndentation(1)}// <editor-fold defaultstate="collapsed" desc=" Generated Dependencies ">
#foreach($dependency in $dependencies.getDependency())
#set($specification = $modules.getSpecification($dependency.getIdentifier()))

${tool.getIndentation(1)}/**
${tool.getIndentation(1)} * Gets the {@code $dependency.getName()} dependency.
#if($dependency.getImplementationName())
${tool.getIndentation(1)} * <p>This method returns the {@code '$dependency.getImplementationName()'} object of the {@code '$dependency.getIdentifier()'}#if($specification && $specification.getClazz()) ({@code $specification.getClazz()})#end specification#if($dependency.getVersion()) at specification level $dependency.getVersion()#end.</p>
#else
${tool.getIndentation(1)} * <p>This method returns any available object of the {@code '$dependency.getIdentifier()'}#if($specification && $specification.getClazz()) ({@code $specification.getClazz()})#end specification#if($dependency.getVersion()) at specification level $dependency.getVersion()#end.</p>
#end
#if($specification.getScope())
${tool.getIndentation(1)} * <p>That specification applies to {@code $specification.getScope()} scope. The $specification.getScope().toLowerCase() object is returned whenever requested#if($dependency.isBound()) and bound to this instance#end.</p>
#else
${tool.getIndentation(1)} * <p>That specification does not apply to any scope. A new object is returned whenever requested#if($dependency.isBound()) and bound to this instance#end.</p>
#end
#if($dependency.getProperties())
${tool.getIndentation(1)} * <p><b>Properties</b><dl>
#foreach($property in $dependency.getProperties().getProperty())
${tool.getIndentation(1)} * <dt>"{@code $property.getName()}"</dt>
${tool.getIndentation(1)} * <dd>Property of type {@code $tool.getJavaTypeName($property,false)}.
#if($property.getDocumentation())
${tool.getIndentation(1)} * <blockquote>$tool.getJavadocComment($property.getDocumentation().getText("en"), 1, " * ")</blockquote>
#end
${tool.getIndentation(1)} * </dd>
#end
${tool.getIndentation(1)} * </dl>
#end
#if($dependency.getDocumentation())
${tool.getIndentation(1)} * @return $tool.getJavadocComment($dependency.getDocumentation().getText("en"), 1, " * ")
#else
${tool.getIndentation(1)} * @return The {@code $dependency.getName()} dependency.
#end
#if($dependency.isOptional())
${tool.getIndentation(1)} * {@code null} if no object is available.
#end
${tool.getIndentation(1)} * @throws org.jomc.ObjectManagementException if getting the dependency instance fails.
${tool.getIndentation(1)} */
#if($dependency.isDeprecated())
${tool.getIndentation(1)}@Deprecated
#end
${tool.getIndentation(1)}@javax.annotation.Generated( value = "$toolName $toolVersion", comments = "See $toolUrl" )
${tool.getIndentation(1)}$tool.getJavaModifierName($implementation,$dependency) $tool.getJavaTypeName($dependency) $tool.getJavaGetterMethodName($dependency)()
${tool.getIndentation(1)}{
#if($dependency.isOptional())
${tool.getIndentation(2)}return ($tool.getJavaTypeName($dependency)) org.jomc.ObjectManagerFactory.getObjectManager( this.getClass().getClassLoader() ).getDependency( this, "$dependency.getName()" );
#else
${tool.getIndentation(2)}final $tool.getJavaTypeName($dependency) _d = ($tool.getJavaTypeName($dependency)) org.jomc.ObjectManagerFactory.getObjectManager( this.getClass().getClassLoader() ).getDependency( this, "$dependency.getName()" );
${tool.getIndentation(2)}assert _d != null : "'$dependency.getName()' dependency not found.";
${tool.getIndentation(2)}return _d;
#end
${tool.getIndentation(1)}}
#end
${tool.getIndentation(1)}// </editor-fold>
#end